// Package user provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package user

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ErrResponse400 各エンドポイントでの400エラーレスポンス
type ErrResponse400 struct {
	// Code ステータスコード
	// エラーコードを表記する
	Code int `json:"code"`

	// Msg ステータスメッセージ
	// エラー内容などを表記する
	Msg string `json:"msg"`

	// ParamErrors パラメータエラー詳細情報
	ParamErrors *[]struct {
		// Fields フィールド情報
		Fields *[]string `json:"fields,omitempty"`

		// Message エラーメッセージ
		Message *string `json:"message,omitempty"`
	} `json:"param_errors,omitempty"`
}

// ErrResponse401 各エンドポイントでの401エラーレスポンス
type ErrResponse401 struct {
	// Code ステータスコード
	// エラーコードを表記する
	Code int `json:"code"`

	// Detail ステータスメッセージ詳細
	// エラー内容などを表記する
	Detail *string `json:"detail,omitempty"`

	// Msg ステータスメッセージ
	// エラー内容などを表記する
	Msg string `json:"msg"`
}

// ErrResponse500 各エンドポイントでの500エラーレスポンス
type ErrResponse500 struct {
	// Code ステータスコード
	// エラーコードを表記する
	Code int `json:"code"`

	// Msg ステータスメッセージ
	// エラー詳細は出力せずに固定文言を返す
	Msg string `json:"msg"`
}

// RequestUserCreate ユーザ登録
type RequestUserCreate struct {
	Email   string `json:"email"`
	MeiName string `json:"mei_name"`

	// Password パスワードは8文字以上、英数字を含む必要があります。
	Password string `json:"password"`
	SeiName  string `json:"sei_name"`
	Tel      string `json:"tel"`
}

// ResponseUserCreate ユーザ登録
type ResponseUserCreate struct {
	// AccessToken JWTアクセストークン
	AccessToken string `json:"access_token"`

	// ExpiresIn アクセストークンの有効期限（秒数）
	ExpiresIn int `json:"expires_in"`

	// RefreshToken リフレッシュトークン
	RefreshToken string `json:"refresh_token"`
}

// UserPostParams defines parameters for UserPost.
type UserPostParams struct {
	// XApiKey APIキー
	XApiKey string `json:"X-Api-Key"`

	// XRequestId リクエストID
	XRequestId *string `json:"X-Request-Id,omitempty"`
}

// UserPostJSONRequestBody defines body for UserPost for application/json ContentType.
type UserPostJSONRequestBody = RequestUserCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ユーザ登録
	// (POST /v1/user/create)
	UserPost(w http.ResponseWriter, r *http.Request, params UserPostParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// ユーザ登録
// (POST /v1/user/create)
func (_ Unimplemented) UserPost(w http.ResponseWriter, r *http.Request, params UserPostParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// UserPost operation middleware
func (siw *ServerInterfaceWrapper) UserPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserPostParams

	headers := r.Header

	// ------------- Required header parameter "X-Api-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Api-Key")]; found {
		var XApiKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Api-Key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Api-Key", valueList[0], &XApiKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Api-Key", Err: err})
			return
		}

		params.XApiKey = XApiKey

	} else {
		err := fmt.Errorf("Header parameter X-Api-Key is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "X-Api-Key", Err: err})
		return
	}

	// ------------- Optional header parameter "X-Request-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Request-Id")]; found {
		var XRequestId string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Request-Id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Request-Id", valueList[0], &XRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Request-Id", Err: err})
			return
		}

		params.XRequestId = &XRequestId

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserPost(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/user/create", wrapper.UserPost)
	})

	return r
}
